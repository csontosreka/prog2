<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Liskov!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info> 

    <section>
        <title>Ciklomatikus komplexitás</title>
        	<para>
            Számoljuk ki valamelyik programunk függvényeinek ciklomatikus komplexitását! Lásd a fogalom
			tekintetében a <link xlink:href="https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog2_2.pdf">https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog2_2.pdf</link> (77-79 fóliát)!    
            </para>
			
			<para>A ciklomatikus komplexitás egy szoftvermetrika, melyet Thomas J. McCabe publikált 1976-ban. Alkotója után gyakran McCabe-komplexitásnak is nevezik. A metrika egy adott szoftver forráskódjának alapján határozza meg annak komplexitását, egy konkrét számértékben kifejezve. A komplexitás számítása a gráfelméletre alapul. A forráskódban az elágazásokból felépülő gráf pontjai, és a köztük lévő élek alapján számítható ki.</para>
			<para>A ciklomatikus komplexitás értéke: M = E − N + 2P ahol E a gráf éleinek száma, N a gráfban lévő csúcsok száma, P az összefüggő komponensek száma.</para>
			<para>Példaprogram: </para>
			<programlisting language="java"><![CDATA[
			public class Exam {
				public static void main(String[] args) {

					int points = 91;

						if (points >= 40) {
							if (points <= 60) {
								System.out.println("2");
							} 
							else if (points <= 70) {
								System.out.println("3");
							} 
							else if (points <= 80) {
								System.out.println("4");
							} 
							else {
								System.out.println("5");
							}
						}
						else {
							System.out.println("1");
						}
				}
			}//complexity 5
			]]></programlisting>
			<para>
			<link xlink:href="../../../bhax/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/forraskodok/Exam.java">../../../bhax/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/forraskodok/Exam.java</link>
			</para>

    </section> 

    <section>
        <title>EPAM: Interfész evolúció Java-ban</title>
        	<para>
             Mutasd be milyen változások történtek Java 7 és Java 8 között az interfészekben. Miért volt erre szükség, milyen problémát vezetett ez be?   
            </para>
			<para>A Java 8 óta az interfészekben használhatunk statikus metódusokat is. Ezek működése eltér a Java 8 előtti interfészekétől, hiszen eredetileg az interfészek metódusai mind absztrakt metódusok voltak, tehát az implementációt nem kellett megadjuk. Az implementációk megadása az interfészt használó osztály feladata volt. </para>
			<para>A statikus metódusoknak az interfészekben való használatakor meg kell adni a body-ját. Ahhoz, hogy egy ilyen metódust létrehozzunk, a static kulcsszót kell használnunk. Ezek a metódusok alapból publikusak lesznek.</para>
			<para>Az interfészek statikus metódusai nem öröklődnek, tehát ha ilyen metódust akarunk meghívni, akkor azt közvetlenül az interfészben kell megtenni és nem az azt implementáló osztályban.</para>
			<programlisting language="java"><![CDATA[
			public interface MyInterface {

				//Működik, hiszen statikus metódusnak van body-ja
				static String name(){
					String name = "Reka";
					return name;
				}

				//nem működik, mivel nincs body
				static String anotherName();
			}
			]]></programlisting>
			<para>Megoldás linkje: <link xlink:href="../../../bhax/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/forraskodok/MyInterface.java">../../../bhax/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/forraskodok/MyInterface.java</link></para>
    </section>  

    <section>
        <title>EPAM: Liskov féle helyettesíthetőség elve, öröklődés</title>
        	<para>Adott az alábbi osztály hierarchia. </para>
			<programlisting language="java"><![CDATA[
			class Vehicle, class Car extends Vehicle, class Supercar extends Car
			]]></programlisting>
			<para>Mindegyik osztály konstruktorában történik egy kiíratás, valamint a Vehicle osztályban szereplő start() metódus mindegyik alosztályban felül van definiálva.</para>
			<para>Mi történik ezen kódok futtatása esetén, és miért?</para>
			<para>A Liskov-féle behelyettesítési elv, rövid nevén LSP, kimondja, hogy a program viselkedése nem változhat meg attól, hogy az ős osztály egy példánya helyett a jövőben valamelyik gyermek osztályának példányát használom.</para>
			<programlisting language="java"><![CDATA[
			Vehicle firstVehicle = new Supercar();
			firstVehicle.start();
			System.out.println(firstVehicle instanceof Car);
			Car secondVehicle = (Car) firstVehicle;
			secondVehicle.start();
			System.out.println(secondVehicle instanceof Supercar);
			Supercar thirdVehicle = new Vehicle();
			thirdVehicle.start();
			]]></programlisting>
			<para>A firstVehicle egy Supercar lesz, tehát a Supercar class-on belüli start() metódust fogja meghívni a program. Mivel a Supercar osztály kiegészíti a Car osztályt, így a firstVehicle instanceof Car feltétel igaz lesz.</para>
			<para>A secondVehicle egyenlő a firstVehicle-el, így szintén a Supercar classban lévő start() metódus kerül meghívásra. </para>
			<para>A thirdVehicle esetén a program hibát jelez.</para>
			<para>Forráskód: <link xlink:href="../../../bhax/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/forraskodok/liskov/Vehicle.java">../../../bhax/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/forraskodok/liskov/Vehicle.java</link></para>
			
			
    </section>  

    <section>
        <title>EPAM: Interfész, Osztály, Absztrak Osztály</title>
        	<para>
             Mi a különbség Java-ban a Class, Abstract Class és az Interface között? Egy tetszőleges példával / példa kódon keresztül mutasd be őket és hogy mikor melyik koncepciót célszerű használni.   
            </para>
			<para>Hasznos linkek: <link xlink:href="https://www.javatpoint.com/difference-between-abstract-class-and-interface">https://www.javatpoint.com/difference-between-abstract-class-and-interface</link>, <link xlink:href="https://dzone.com/articles/when-to-use-abstract-class-and-intreface">https://dzone.com/articles/when-to-use-abstract-class-and-intreface</link></para>
			
			<para>Abstract class:</para>
			<para>Az absztrakt osztálynak lehetnek absztrakt és nem absztrakt metódusai. Nem támogatja a többszörös öröklődést. Lehetnek végleges, nem végleges, statikus és nem statikus változók. Az absztrakt osztály biztosíthatja az interfész megvalósítását. Az abstract kulcsszóval deklaráljuk. Az absztrakt osztály kiterjeszthet egy másik Java osztályt és több Java interfészt is megvalósíthat. Kiterjeszthető a "extends" kulcsszóval. Az absztrakt osztályoknak lehetnek private, protected, stb. tagjai. Akkor használjuk, ha meg szeretnénk osztani a kódot több szorosan kapcsolódó osztály között, az absztrakt osztályt kibővítő osztályoknak sok közös módszere vagy mezője van, vagy a nyilvánosaktól eltérő hozzáférés-módosítókat igényelnek, vagy ha nem statikus, vagy nem final mezőket szeretnénk deklarálni.</para>
			<para>Interface:</para>
			<para>A Java 8 óta rendelkezhet alapértelmezett és statikus metódusokkal is. Támogatja a többszörös öröklődést. Csak statikus vagy final változók vannak. Az interfész nem tudja biztosítani az absztrakt osztály megvalósítását. Az interface kulcsszóval deklaráljuk. Egy interfész csak egy másik Java interfészt bővíthet. Az „implement” kulcsszóval implementálható. Tagjai alapból publikusak. Akkor használjuk, ha nem kapcsolódó osztályok implementálják az interfészünket, meg szeretnénk adni egy adott adattípus viselkedését, de nem érdekel minket, hogy ki hajtja végre a viselkedését vagy ki szeretnénk használni a többszörös öröklődés lehetőségét.</para>
			<para>Class:</para>
			<para>Nem lehetnek absztakt metódusai. A new kulcsszóval példányosítható. Lehet final-el deklarálni.</para>
			<para>Példakód: <link xlink:href="../../../bhax/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/forraskodok/ClassInterfaceAbstractClass/src/Class.java">../../../bhax/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/forraskodok/ClassInterfaceAbstractClass/src/Class.java</link></para>

    </section>    
        

</chapter>                