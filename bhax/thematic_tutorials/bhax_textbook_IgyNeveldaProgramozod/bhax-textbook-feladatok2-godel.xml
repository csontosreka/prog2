<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Gödel!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

    <section>
        <title>GIMP Scheme hack</title>
        	<para>
                Fealadatleírás
            </para>
			<programlisting language = "python"><![CDATA[
		(
		define (elem x lista)

			(if (= x 1) (car lista) (elem (- x 1) ( cdr lista ) ) )

		)

		(define (text-width text font fontsize)
		(let*
			(
				(text-width 1)
			)
			(set! text-width (car (gimp-text-get-extents-fontname text fontsize PIXELS font)))    

			text-width
			)
		)

		(define (text-wh text font fontsize)
		(let*
			(
				(text-width 1)
				(text-height 1)
			)
			;;;
			(set! text-width (car (gimp-text-get-extents-fontname text fontsize PIXELS font)))    
			;;; ved ki a lista 2. elemét
			(set! text-height (elem 2  (gimp-text-get-extents-fontname text fontsize PIXELS font)))    
			;;;    
			
			(list text-width text-height)
			)
		)


		;(text-width "alma" "Sans" 100)

		(define (script-fu-bhax-mandala text text2 font fontsize width height color gradient)
		(let*
			(
				(image (car (gimp-image-new width height 0)))
				(layer (car (gimp-layer-new image width height RGB-IMAGE "bg" 100 LAYER-MODE-NORMAL-LEGACY)))
				(textfs)
				(text-layer)
				(text-width (text-width text font fontsize))
				;;;
				(text2-width (car (text-wh text2 font fontsize)))
				(text2-height (elem 2 (text-wh text2 font fontsize)))
				;;;
				(textfs-width)
				(textfs-height)
				(gradient-layer)
			)

			(gimp-image-insert-layer image layer 0 0)

			(gimp-context-set-foreground '(0 255 0))
			(gimp-drawable-fill layer FILL-FOREGROUND)
			(gimp-image-undo-disable image) 

			(gimp-context-set-foreground color)

			(set! textfs (car (gimp-text-layer-new image text font fontsize PIXELS)))
			(gimp-image-insert-layer image textfs 0 -1)
			(gimp-layer-set-offsets textfs (- (/ width 2) (/ text-width 2))  (/ height 2))
			(gimp-layer-resize-to-image-size textfs)

			(set! text-layer (car (gimp-layer-new-from-drawable textfs image)))
			(gimp-image-insert-layer image text-layer 0 -1)
			(gimp-item-transform-rotate-simple text-layer ROTATE-180 TRUE 0 0)
			(set! textfs (car(gimp-image-merge-down image text-layer CLIP-TO-BOTTOM-LAYER)))

			(set! text-layer (car (gimp-layer-new-from-drawable textfs image)))
			(gimp-image-insert-layer image text-layer 0 -1)
			(gimp-item-transform-rotate text-layer (/ *pi* 2) TRUE 0 0)
			(set! textfs (car(gimp-image-merge-down image text-layer CLIP-TO-BOTTOM-LAYER)))

			(set! text-layer (car (gimp-layer-new-from-drawable textfs image)))
			(gimp-image-insert-layer image text-layer 0 -1)
			(gimp-item-transform-rotate text-layer (/ *pi* 4) TRUE 0 0)
			(set! textfs (car(gimp-image-merge-down image text-layer CLIP-TO-BOTTOM-LAYER)))
			
			(set! text-layer (car (gimp-layer-new-from-drawable textfs image)))
			(gimp-image-insert-layer image text-layer 0 -1)
			(gimp-item-transform-rotate text-layer (/ *pi* 6) TRUE 0 0)
			(set! textfs (car(gimp-image-merge-down image text-layer CLIP-TO-BOTTOM-LAYER)))    
			
			(plug-in-autocrop-layer RUN-NONINTERACTIVE image textfs)
			(set! textfs-width (+ (car(gimp-drawable-width textfs)) 100))
			(set! textfs-height (+ (car(gimp-drawable-height textfs)) 100))
				
			(gimp-layer-resize-to-image-size textfs)
			
			(gimp-image-select-ellipse image CHANNEL-OP-REPLACE (- (- (/ width 2) (/ textfs-width 2)) 18) 
				(- (- (/ height 2) (/ textfs-height 2)) 18) (+ textfs-width 36) (+ textfs-height 36))
			(plug-in-sel2path RUN-NONINTERACTIVE image textfs)
				
			(gimp-context-set-brush-size 22)
			(gimp-edit-stroke textfs)
			
			(set! textfs-width (- textfs-width 70))
			(set! textfs-height (- textfs-height 70))
			
			(gimp-image-select-ellipse image CHANNEL-OP-REPLACE (- (- (/ width 2) (/ textfs-width 2)) 18) 
				(- (- (/ height 2) (/ textfs-height 2)) 18) (+ textfs-width 36) (+ textfs-height 36))
			(plug-in-sel2path RUN-NONINTERACTIVE image textfs)
				
			(gimp-context-set-brush-size 8)
			(gimp-edit-stroke textfs)
				
			(set! gradient-layer (car (gimp-layer-new image width height RGB-IMAGE "gradient" 100 LAYER-MODE-NORMAL-LEGACY)))
			
			(gimp-image-insert-layer image gradient-layer 0 -1)
			(gimp-image-select-item image CHANNEL-OP-REPLACE textfs)
			(gimp-context-set-gradient gradient) 
			(gimp-edit-blend gradient-layer BLEND-CUSTOM LAYER-MODE-NORMAL-LEGACY GRADIENT-RADIAL 100 0 
			REPEAT-TRIANGULAR FALSE TRUE 5 .1 TRUE (/ width 2) (/ height 2) (+ (+ (/ width 2) (/ textfs-width 2)) 8) (/ height 2))
			
			(plug-in-sel2path RUN-NONINTERACTIVE image textfs)

			(set! textfs (car (gimp-text-layer-new image text2 font fontsize PIXELS)))
			(gimp-image-insert-layer image textfs 0 -1)
			(gimp-message (number->string text2-height))
			(gimp-layer-set-offsets textfs (- (/ width 2) (/ text2-width 2)) (- (/ height 2) (/ text2-height 2)))
				
			;(gimp-selection-none image)
			;(gimp-image-flatten image)
			
			(gimp-display-new image)
			(gimp-image-clean-all image)
			)
		)

		;(script-fu-bhax-mandala "Bátfai Norbert" "BHAX" "Ruge Boogie" 120 1920 1080 '(255 0 0) "Shadows 3")

		(script-fu-register "script-fu-bhax-mandala"
			"Mandala9"
			"Creates a mandala from a text box."
			"Norbert Bátfai"
			"Copyright 2019, Norbert Bátfai"
			"January 9, 2019"
			""
			SF-STRING       "Text"      "Bátf41 Haxor"
			SF-STRING       "Text2"     "BHAX"
			SF-FONT         "Font"      "Sans"
			SF-ADJUSTMENT   "Font size" '(100 1 1000 1 10 0 1)
			SF-VALUE        "Width"     "1000"
			SF-VALUE        "Height"    "1000"
			SF-COLOR        "Color"     '(255 0 0)
			SF-GRADIENT     "Gradient"  "Deep Sea"
		)
		(script-fu-menu-register "script-fu-bhax-mandala" 
			"<Image>/File/Create/BHAX"
		)
		
		]]></programlisting>


    </section>

    <section>
        <title>EPAM: Mátrix szorzás Stream API-val</title>
        	<para>
              Implementáld le a mátrix szorzást Java-ban for és while ciklusok használata nélkül.  
            </para>
			<programlisting language="java"><![CDATA[
			
			public interface Matrix {

				void setElement(int x, int y, int value);

				Matrix multiply(Matrix input);

			}
			]]></programlisting>
			
			<programlisting language="java"><![CDATA[
			
			import static org.junit.jupiter.api.Assertions.assertEquals;

			import org.junit.jupiter.api.Test;

			import com.epam.training.matrix.impl.LambdaMatrix;

			public class LambdaMatrixTest {

				@Test
				public void testMultiplyShouldReturnWithCorrectValue() {
					// Given
					Matrix matrixA = new LambdaMatrix(new int[][] {{1, 5},
																   {2, 3},
																   {1, 7}});
					Matrix matrixB = new LambdaMatrix(new int[][] {{1, 2, 3, 7},
																   {5, 2, 8, 1}});
					Matrix expected = new LambdaMatrix(new int[][] {{26, 12, 43, 12},
																	{17, 10, 30, 17},
																	{36, 16, 59, 14}});
					
					// When
					Matrix actual = matrixA.multiply(matrixB);
					
					// Then
					assertEquals(expected, actual);
				}
				
				@Test
				public void testSetElementShouldSetTheRightCoordinateOfTheMatrix() {
					// Given
					Matrix matrix = new LambdaMatrix(2, 3);
					Matrix expected = new LambdaMatrix(new int[][] {{0, 0, 0},
																	{0, 0, 5}});
					
					// When
					matrix.setElement(1, 2, 5);
					
					// Then
					assertEquals(expected, matrix);
				}
				
			}
			]]></programlisting>
			
			<para>Ebben a tesztben azt vizsgáljuk meg, hogy a két mátrix szorzatának eredménye megegyezik-e a várt eredménnyel. A Given részben megadjuk a két mátrixot és azok szorzatának előre kézzel kiszámolt eredményét. A When részben az actual változóban eltároljuk az A és B mátrix multiply() metódussal kiszámolt szorzatának eredményét. Végül a Then részben az assertEquals() metódussal megnézzük, hogy megyegyezik-e a két eredmény, ha igen, akkor a teszt sikeres.</para>
			<para>A teszt második részében a mátrix változóban létrehozunk egy 2 soros 3 oszlopos mátrixot. Az expected itt is a kézzel kiszámolt várt érték lesz. A When részben a 2. sor 3. oszlopában lévő elemnek 5 lesz az értéke. A Then részben pedig ismét leellenőrízzük, hogy az expected és az actual megegyezik-e.</para>
			
    </section>

    <section>
        <title>EPAM: LinkedList vs ArrayList</title>
        	<para>
                Mutass rá konkrét esetekre amikor a Java-beli LinkedList és ArrayList rosszabb performanciát eredményezhet a másikhoz képest. (Lásd még LinkedList és ArrayList forráskódja). Végezz méréseket is. (mit csinál az ArrayList amikor megtelik)
			</para>
			<para>Az ArrayList és a LinkedList egyaránt implementálja a List felületet, és módszereik és eredményeik szinte megegyeznek. Azonban van néhány különbség, amelyeknél hol az egyik, hol a másik lesz hasznosabb.</para>
			<para>LinkedList előnyei:</para>
			<para>- get(int index), mivel használható a getFirst() és getLast() metódus.</para>
			<para>- add(int index, E element), mivel használható az addFirst és addLast().</para>
			<para>- remove(int index), mivel használható removeFirst() és removeLast().</para>
			<para>- Az Iterator.remove() O(1)</para>
			<para>-  És a ListIterator.add(E element) is O(1)</para>
			<para>ArrayList előnyei: </para>
			<para>- A get(int index) O(1).</para>
			<para>- Az add(E element) O(1)</para>
			
			<programlisting language="java"><![CDATA[
			
			import java.util.ArrayList;
			import java.util.Comparator;
			import java.util.HashMap;
			import java.util.LinkedHashMap;
			import java.util.LinkedList;
			import java.util.TreeMap;

			import com.epam.training.measurement.Measurement;
			import com.epam.training.meter.list.ListMeter;
			import com.epam.training.meter.map.MapMeter;
			import com.epam.training.meter.map.MapWithWrongKeyMeter;

			public class Main {

				private static final int SIZE_10M = 10_000_000;
				private static final int SIZE_1M = 1_000_000;
				private static final int SIZE_100K = 100_000;
				private static final int SIZE_10K = 10_000;
				
				public static void main(String[] args) {
					System.out.println(" --- List measurement ---");
					new Measurement(
							new ListMeter(() -> new ArrayList<>()),
							new ListMeter(() -> new ArrayList<>(SIZE_10M)),
							new ListMeter(() -> new LinkedList<>())
						).measureCollectionSetup(SIZE_10M)
						 .measureFrequentChanges(SIZE_100K)
						 .measureGet(SIZE_10M);
					
					System.out.println(" --- Map measurement ---");
					new Measurement(
							new MapMeter(() -> new HashMap<>()),
							new MapMeter(() -> new LinkedHashMap<>()),
							new MapMeter(() -> new TreeMap<>())
						).measureCollectionSetup(SIZE_1M)
						 .measureFrequentChanges(SIZE_1M)
						 .measureGet(SIZE_1M);
					
					System.out.println(" --- Map with wrong key measurement ---");
					new Measurement(
							new MapWithWrongKeyMeter(() -> new HashMap<>()),
							new MapWithWrongKeyMeter(() -> new LinkedHashMap<>()),
							new MapWithWrongKeyMeter(() -> new TreeMap<>(Comparator.comparing(MapWithWrongKeyMeter.WrongClass::getString)))
						).measureCollectionSetup(SIZE_10K)
						 .measureFrequentChanges(SIZE_10K)
						 .measureGet(SIZE_10K);
				}

			}
			]]></programlisting>
			
			<figure>
            <title>List Measurement</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/list_measurement.png" scale="50" />
                </imageobject>
                <textobject>
                    <phrase>List Measurement</phrase>
                </textobject>
            </mediaobject>
			</figure>
			
			<figure>
            <title>Map Measurement</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/map-measurement.png" scale="50" />
                </imageobject>
                <textobject>
                    <phrase>Map measurement</phrase>
                </textobject>
            </mediaobject>
			</figure>
			
			<figure>
            <title>Map With Wrong Key Measurement</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/map-wrong-key.png" scale="50" />
                </imageobject>
                <textobject>
                    <phrase>Map With Wrong Key Measurement</phrase>
                </textobject>
            </mediaobject>
			</figure>
			

    </section>

    <section>
        <title>EPAM: Refactoring</title>
        	<para>
             Adott egy “legacy” kód mely tartalmaz anonymus interface implementációkat, ciklusokat és feltételes kifejezések. Ebben a feladatban ezt a “legacy” kódot szeretnénk átírni lambda kifejezések segítségével (metódus referencia használata előnyt jelent!)   
            </para>
			
			<programlisting language="java"><![CDATA[
			
			import com.epam.training.exercise.Calculator;
			import com.epam.training.exercise.Formatter;
			import java.util.Arrays;
			import java.util.List;
			import java.util.Objects;
			import java.util.function.Consumer;
			import java.util.stream.Collectors;

			public class Refactored {

				public void refactored() {
					Runnable runnable = createRunnable();
					runnable.run();

					Calculator calculator = createCalculator();
					System.out.println("Calculation result: " + calculator.calculate(3));

					List<Integer> inputNumbers = Arrays.asList(1, null, 3, null, 5);
					List<Integer> resultNumbers = inputNumbers
							.stream()
							.filter(Objects::nonNull)       // number -> number != null
							.map(calculator::calculate)     // number -> calculator.calculate(number)
							.collect(Collectors.toList());

					Consumer<Integer> consumerMethod = createConsumerMethod();
					System.out.println("Result numbers: ");
					resultNumbers.forEach(consumerMethod);

					Formatter formatter = createFormatter();
					System.out.println("Formatted numbers: " + formatter.format(resultNumbers));
				}

				private Runnable createRunnable() {
					return () -> System.out.println("Runnable!");
				}

				private Formatter createFormatter() {
					return numbers -> numbers.stream()
							.map(String::valueOf)           // number -> String.valueOf(number)
							.collect(Collectors.joining());
				}

				private Consumer<Integer> createConsumerMethod() {
					return System.out::println;             // number -> System.out.println(number);
				}

				private Calculator createCalculator() {
					return number -> number * number;
				}

			}
			]]></programlisting>

    </section> 

</chapter>           